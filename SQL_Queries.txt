Data Scientist Role Play: Profiling and Analysing the Yelp Dataset Coursera Worksheet


Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table =10000
iv. Checkin table =  10000
v. elite_years table=10000
vi. friend table =10000 
vii. hours table =10000
viii. photo table =10000 
ix. review table = 10000
x. tip table = 10000
xi. user table =10000
	
*******************************************************************************************************

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys 
are listed in the table, please specify which foreign key.

i. Business = 10000		 Primary key
ii. Hours = 1562
iii. Category = 2643	 	 Foreign key= business_id
iv. Attribute = 1115 		 Foreign key= business_id
v. Review = 10000 		 Primary key
vi. Checkin = 493		 Foreign key= business_id
vii. Photo = 10000		 Primary key
viii. Tip =  537 		 Foreign key = user_id
ix. User = 10000		 Primary key
x. Friend = 11 			 Foreign key= user_id
xi. Elite_years = 2780	 	 Foreign key= user_id

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

*******************************************************************************************************


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

SELECT *								--Select all columns to retrieve results
FROM user 								-- from the user table
where id IS NULL or name IS NULL					-- condition checking for NULL values on each column
	or review_count IS NULL or yelping_since IS NULL
	or useful IS NULL or funny IS NULL
	or cool IS NULL or fans  IS NULL
	or average_stars IS NULL or compliment_hot IS NULL
	or compliment_more IS NULL or compliment_profile IS NULL
	or compliment_cute IS NULL or compliment_list IS NULL
	or compliment_note IS NULL or compliment_plain IS NULL
	or compliment_cool IS NULL or compliment_funny IS NULL
	or compliment_writer IS NULL or compliment_photos IS NULL;
	
*******************************************************************************************************

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars					
	-- Code:  
		select  Min(stars) AS Minimum, MAX(stars) AS Maximum, AVG(stars) AS Average from review;
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars				
	-- Code:  
		select  Min(stars) AS Minimum, MAX(stars) AS Maximum, AVG(stars) AS Average from business;
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes					
	--Code:   
		select  Min(likes) AS Minimum, MAX(likes) AS Maximum, AVG(likes) AS Average from tip;
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count				
	--Code:   
		select  Min(count) AS Minimum, MAX(count) AS Maximum, AVG(count) AS Average from checkin;
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count				
	--Code:   
		select  Min(review_count) AS Minimum, MAX(review_count) AS Maximum, AVG(review_count) AS Average from user;
	
		min: 0		max: 2000	avg: 24.2995
		

*******************************************************************************************************


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT city, SUM (review_count) AS reviews_of_each_City		--summed all the reviews of same city and then grouped it by city
	FROM business
	GROUP BY city
	ORDER BY reviews_of_each_City DESC;

	Copy and Paste the Result Below:

+-----------------+----------------------+
| city            | reviews_of_each_City |
+-----------------+----------------------+
| Las Vegas       |                82854 |
| Phoenix         |                34503 |
| Toronto         |                24113 |
| Scottsdale      |                20614 |
| Charlotte       |                12523 |
| Henderson       |                10871 |
| Tempe           |                10504 |
| Pittsburgh      |                 9798 |
| Montréal        |                 9448 |
| Chandler        |                 8112 |
| Mesa            |                 6875 |
| Gilbert         |                 6380 |
| Cleveland       |                 5593 |
| Madison         |                 5265 |
| Glendale        |                 4406 |
| Mississauga     |                 3814 |
| Edinburgh       |                 2792 |
| Peoria          |                 2624 |
| North Las Vegas |                 2438 |
| Markham         |                 2352 |
| Champaign       |                 2029 |
| Stuttgart       |                 1849 |
| Surprise        |                 1520 |
| Lakewood        |                 1465 |
| Goodyear        |                 1155 |
+-----------------+----------------------+
(Output limit exceeded, 25 of 362 total rows shown)

*******************************************************************************************************
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT stars AS Rating,
COUNT(stars) AS count
FROM business
WHERE city= 'Avon'
GROUP BY Rating;


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+--------+-------+
| Rating | count |
+--------+-------+
|    1.5 |     1 |
|    2.5 |     2 |
|    3.5 |     3 |
|    4.0 |     2 |
|    4.5 |     1 |
|    5.0 |     1 |
+--------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars AS Rating,
count(stars) AS count
FROM business
WHERE city= 'Beachwood'
GROUP BY Rating;


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+--------+-------+
| Rating | count |
+--------+-------+
|    2.0 |     1 |
|    2.5 |     1 |
|    3.0 |     2 |
|    3.5 |     2 |
|    4.0 |     1 |
|    4.5 |     2 |
|    5.0 |     5 |
+--------+-------+		

*******************************************************************************************************

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	SELECT name, review_count AS total_reviews
	FROM user
	ORDER BY total_reviews DESC				-- Ordering in Descending will give you from highest to lowest values
	LIMIT 3;						-- Then limit by 3 will give the top 3 users
		
	Copy and Paste the Result Below:
+--------+---------------+
| name   | total_reviews |
+--------+---------------+
| Gerald |          2000 |
| Sara   |          1629 |
| Yuri   |          1339 |
+--------+---------------+

*******************************************************************************************************

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

	The answer is no. Because if you look into the results of the query, you will find it easily 
	that more reviews do not guarantee high number of fans.

	SELECT name, review_count AS total_reviews, fans
	FROM user
	GROUP BY total_reviews
	ORDER BY fans DESC;

+-----------+---------------+------+
| name      | total_reviews | fans |
+-----------+---------------+------+
| Amy       |           609 |  503 |
| Mimi      |           968 |  497 |
| Harald    |          1153 |  311 |
| Gerald    |          2000 |  253 |
| Christine |           930 |  173 |
| Lisa      |           813 |  159 |
| Cat       |           377 |  133 |
| William   |          1215 |  126 |
| Fran      |           862 |  124 |
| Lissa     |           834 |  120 |
| Mark      |           861 |  115 |
| Tiffany   |           408 |  111 |
| Roanna    |          1039 |  104 |
| Angela    |           694 |  101 |
| .Hon      |          1246 |  101 |
| Linda     |           584 |   89 |
| Christina |           842 |   85 |
| Jessica   |           220 |   84 |
| Sui       |           754 |   78 |
| Yuri      |          1339 |   76 |
| Koizumi   |           160 |   73 |
| Michelle  |           258 |   69 |
| Mike      |           346 |   65 |
| Princeton |           376 |   64 |
| Alison    |           775 |   61 |
+-----------+---------------+------+
(Output limit exceeded, 25 of 367 total rows shown)

Based on the analysis of two columns i.e total_count and fans, later one is sorted in Descending order but the corresponding numbers 
in total_count column are not positively correlated. There is a small trend in few values but missing in the whole results.

*******************************************************************************************************
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	
	The word 'love' is more often used compared to the word 'hate' as it can be seen in the results of following queries.

	SQL code used to arrive at answer:

	SELECT count(id) AS Usage_of_Word_love		-- count all where the text column contains any combination of the characters like 'love'
	FROM review
	WHERE text LIKE '%love%';
+--------------------+
| Usage_of_Word_love |
+--------------------+
|               1780 |
+--------------------+

	SELECT count(id) AS Usage_of_Word_Hate		---- count all where the text column contains any combination of the characters like 'hate'
	FROM review
	WHERE text LIKE '%hate%';
+--------------------+
| Usage_of_Word_Hate |
+--------------------+
|                232 |
+--------------------+

*******************************************************************************************************

10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	SELECT id, name, fans			-- Simply select some columns to display and sort the column 'fans' in Descending order.
	FROM user
	ORDER BY fans DESC
	LIMIT 10;
	
	Copy and Paste the Result Below:

+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
		
*******************************************************************************************************
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their 
overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer 
the following questions. Include your code.
	


i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, the distribution of hours for both groups are different from each other as shown in below outputs.

Let's define our groups first:
Group 1 is 2-3 stars
Group 2 is 4-5 stars 
CITY is Phoenix

Group 1:
+------------------+---------+-------+-------+----------------------+
| numberOfBusiness | city    | state | stars | hours                |
+------------------+---------+-------+-------+----------------------+
|                7 | Phoenix | AZ    |   2.0 | Saturday|5:00-0:00   |
|               21 | Phoenix | AZ    |   3.0 | Saturday|10:00-18:00 |
+------------------+---------+-------+-------+----------------------+
Group 2:
+------------------+---------+-------+-------+----------------------+
| numberOfBusiness | city    | state | stars | hours                |
+------------------+---------+-------+-------+----------------------+
|               12 | Phoenix | AZ    |   4.0 | Saturday|11:00-22:00 |
|                7 | Phoenix | AZ    |   4.5 | Saturday|11:00-18:00 |
|               23 | Phoenix | AZ    |   5.0 | Saturday|5:00-19:00  |
+------------------+---------+-------+-------+----------------------+



ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, the number of reviews for both groups are different as shown in the below outputs.

Group 1 is 2-3 stars
Group 2 is 4-5 stars 
CITY is Phoenix

GROUP 1:
+---------+-------+-------+-------------------+
| city    | state | stars | number_of_reviews |
+---------+-------+-------+-------------------+
| Phoenix | AZ    |   2.0 |               963 |
| Phoenix | AZ    |   2.5 |              1594 |
| Phoenix | AZ    |   3.0 |              3973 |
+---------+-------+-------+-------------------+        

GROUP 2:
+---------+-------+-------+-------------------+
| city    | state | stars | number_of_reviews |
+---------+-------+-------+-------------------+
| Phoenix | AZ    |   4.0 |              9518 |
| Phoenix | AZ    |   4.5 |              7375 |
| Phoenix | AZ    |   5.0 |              2955 |
+---------+-------+-------+-------------------+
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Group 1 is 2-3 stars
Group 2 is 4-5 stars 
CITY is Phoenix

Yes. If we analyse the below given output, the number of businesses for group 2 is higher than number 
of businesses for group 1. To conclude, higher rating businesses 
are larger in number than lower rating businesses in the city of Phoenix,AZ.
+---------+-------+-------+------------------+
| city    | state | stars | numberOFBusiness |
+---------+-------+-------+------------------+
| Phoenix | AZ    |   2.0 |               70 |
| Phoenix | AZ    |   2.5 |               96 |
| Phoenix | AZ    |   3.0 |              129 |
| Phoenix | AZ    |   3.5 |              153 |
| Phoenix | AZ    |   4.0 |              169 |
| Phoenix | AZ    |   4.5 |              139 |
| Phoenix | AZ    |   5.0 |              195 |
+---------+-------+-------+------------------+

SQL code used for analysis:
  
 i) GROUP 1:
	SELECT COUNT(b.id) AS numberOfBusiness, b.city, b.state, b.stars, h.hours
	FROM business b
	INNER JOIN hours h		--Join with table Hours to compare the distribution of hours for both groups
	ON b.id=h.business_id
	WHERE city Like '%Phoenix%'
	GROUP BY b.stars
	HAVING stars BETWEEN 2.0 AND 3.0	-- 2.0 and 3.0 are our predefined group 1
	ORDER BY stars;	
   GROUP 2:
	SELECT COUNT(b.id) AS numberOfBusiness, b.city, b.state, b.stars, h.hours
	FROM business b
	INNER JOIN hours h
	ON b.id=h.business_id
	WHERE city Like '%Phoenix%'
	GROUP BY b.stars
	HAVING stars BETWEEN 4.0 AND 5.0	-- 4.0 and 5.0 are our predefined group 2
	ORDER BY stars;	

 ii) GROUP 1:
	SELECT city, state, stars, sum(review_count) AS number_of_reviews
	FROM business 
	WHERE city LIKE '%Phoenix%'
	GROUP BY stars
	HAVING stars BETWEEN 2.0 AND 3.0
	ORDER BY stars;
     GROUP 2:
	SELECT city, state, stars, sum(review_count) AS number_of_reviews
	FROM business 
	WHERE city LIKE '%Phoenix%'
	GROUP BY stars
	HAVING stars BETWEEN 4.0 AND 5.0
	ORDER BY stars;
 iii)
	SELECT city, state, stars, count(id) AS numberOFBusiness
	FROM business 
	WHERE city LIKE '%Phoenix%'
	GROUP BY stars
	HAVING stars BETWEEN 2.0 AND 5.0
	ORDER BY stars;

*******************************************************************************************************


2. Group business based on the ones that are open and the ones that are closed. What differences can you
find between the ones that are still open and the ones that are closed? List at least two differences 
and the SQL code you used to arrive at your answer.
	
	 is_open=1 (Open business)
	 is_open=0 (closed business) 
	
i. Difference 1:
              Businesses that are still open have greater number of reviews as compared to closed businesses. (As shown in output)
ii. Difference 2:
              Businesses that are still open have higher ratings (AVG(stars)= 3.679) as compared 
	      to closed businesses (AVG (stars)= 3.520). (Shown in output)
    
OUTPUT:
+-----------+---------------+-------------------+--------------------+---------+
| COUNT(id) |    AVG(stars) | AVG(review_count) | SUM (review_count) | is_open |
+-----------+---------------+-------------------+--------------------+---------+
|      1520 | 3.52039473684 |     23.1980263158 |              35261 |       0 |
|      8480 | 3.67900943396 |     31.7570754717 |             269300 |       1 |
+-----------+---------------+-------------------+--------------------+---------+     
         
SQL code used for analysis:
	SELECT COUNT(id), AVG(stars), AVG(review_count),SUM (review_count),is_open
	FROM business
	GROUP BY is_open;		

*******************************************************************************************************
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to 
   conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis,
clustering businesses to find commonalities or anomalies between them, predicting the overall star rating
for a business, predicting the number of fans a user will have, and so on. These are just a few examples
to get you started, so feel free to be creative and come up with your own problem you want to solve.
Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
        
	 I want to point out the restaurant's business for the investors whether they should invest or not in the relevant business? 
	 If yes, then what are the factors that influence the decision.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                  -I need data from two tables i.e. business and category        
                  -From business table, I will take data about name of the restaurant, location city, people reviews
		   in the form of ratings, and whether the business is still open or not.
		  -From Category table, I will just need category of the business to invest; restaurants in our case.
		  -I will relate both tables through Inner join and will extract the useful information for the investors
		  - Only those restaurants are recommended to invest in which are still open and have received good feedback
		   from the people. (Threshold set to rating equal to or greater than 3.0/5.0 just to define the reputation)

iii. Output of your finished dataset:
+----------------------------------+-----------------+-------------+--------------+-------+---------+-----------------+
| Business_Name                    | city            | category    | review_count | stars | is_open | Recommendations |
+----------------------------------+-----------------+-------------+--------------+-------+---------+-----------------+
| Cafe Tandoor                     | Aurora          | Restaurants |           32 |   3.5 |       1 | Recommended     |
| Patiala House                    | Brampton        | Restaurants |           10 |   4.0 |       1 | Recommended     |
| Fiesta Ranchera                  | Champaign       | Restaurants |            4 |   2.0 |       0 | Not Recommended |
| Irish Republic                   | Chandler        | Restaurants |          141 |   3.0 |       0 | Not Recommended |
| Big City Grill                   | Charlotte       | Restaurants |            4 |   5.0 |       0 | Not Recommended |
| Rise and Dine Cafe               | Chesterland     | Restaurants |           30 |   4.0 |       1 | Recommended     |
| Saigon Grille                    | Cleveland       | Restaurants |           62 |   3.5 |       0 | Not Recommended |
| Iron City Grille                 | Coraopolis      | Restaurants |            3 |   2.0 |       0 | Not Recommended |
| Seoul Garden Korean Restaurant   | Cuyahoga Falls  | Restaurants |           55 |   4.0 |       1 | Recommended     |
| Club India restaurant            | Edinburgh       | Restaurants |            3 |   3.5 |       0 | Not Recommended |
| Thirsty Goat                     | Fitchburg       | Restaurants |           74 |   3.5 |       1 | Recommended     |
| Ping's Cafe                      | Fountain Hills  | Restaurants |           21 |   3.5 |       1 | Recommended     |
| Del Taco                         | Gilbert         | Restaurants |           10 |   3.0 |       1 | Recommended     |
| Famous Sam's                     | Glendale        | Restaurants |            3 |   2.5 |       0 | Not Recommended |
| Landgasthaus Busse               | Hemmingen       | Restaurants |            3 |   3.0 |       0 | Not Recommended |
| Brubaker's Pub                   | Hudson          | Restaurants |            5 |   3.0 |       1 | Recommended     |
| Indian Ocean Restaurant          | Inverness       | Restaurants |            3 |   3.5 |       1 | Recommended     |
| Hibachi-San                      | Las Vegas       | Restaurants |            3 |   4.5 |       0 | Not Recommended |
| Senor Taco                       | Litchfield Park | Restaurants |           83 |   3.5 |       1 | Recommended     |
| Papa Murphy's                    | Madison         | Restaurants |            4 |   4.0 |       0 | Not Recommended |
| Flaming Kitchen                  | Markham         | Restaurants |           25 |   3.0 |       1 | Recommended     |
| TWIISTED Burgers & Sushi         | Medina          | Restaurants |           94 |   4.0 |       1 | Recommended     |
| Burger King                      | Mentor          | Restaurants |            4 |   1.0 |       1 | Not Recommended |
| Green Corner Restaurant          | Mesa            | Restaurants |          267 |   5.0 |       1 | Recommended     |
| C's Restaurant Bakery and Coffee | Middleton       | Restaurants |           37 |   4.0 |       1 | Recommended     |
+----------------------------------+-----------------+-------------+--------------+-------+---------+-----------------+
(Output limit exceeded, 25 of 43 total rows shown)
         
iv. Provide the SQL code you used to create your final dataset:


SELECT SUBSTR(b.name,1,32) AS Business_Name,	--SUBSTR used to show the names of business to only mentioned range as some names are two long to include
b.city,						--Each column is prefixed
c.category, 
b.review_count,
b.stars, 
b.is_open,
CASE						--Used CASE instead of WHERE just to revise the the lesson contents
    WHEN is_open=1 AND stars >= 3.0  THEN 'Recommended'
    ELSE 'Not Recommended'
END Recommendations
FROM business b
INNER JOIN category c
    ON b.id=c.business_id		-- if the column names were similar in both tables, we would use USING 
					to compress the length of code. But here not possible to be included in the JOIN condition
WHERE c.category='Restaurants'
GROUP BY city
ORDER BY city ASC;

*******************************************************************************************************
*******************************************************************************************************
*******************************************************************************************************
